import numpy as np
import pytest

from bioptim import Solver
from cocofest import (
    DingModelFrequency,
    DingModelFrequencyWithFatigue,
    DingModelPulseDurationFrequency,
    DingModelIntensityFrequency,
    OcpFes,
)

# Force and time data coming form examples/data/hand_cycling_force.bio file
force = np.array(
    [
        0,
        33.22386956,
        64.01175842,
        58.96268087,
        54.49535426,
        36.44632893,
        29.96801641,
        30.93602607,
        29.21745363,
        24.59113196,
        23.86747368,
        23.03832502,
        24.05995233,
        24.62126537,
        26.47933897,
        34.35875801,
        35.91539197,
        35.76400291,
        40.52047879,
        46.03698741,
        48.75643065,
        53.95577793,
        56.50240254,
        62.36998819,
        62.85023295,
        61.74541602,
        64.33297518,
        63.9467184,
        64.66585644,
        60.24675264,
        46.53505388,
        41.47114645,
        37.48364824,
        36.74068556,
        39.44173399,
        39.74906276,
        33.43802423,
        25.90760263,
        15.16708131,
        12.73063647,
        22.89840483,
        25.65474343,
        23.78995719,
        24.34094537,
        21.88398197,
        22.46456012,
        23.00685366,
        23.13887312,
        24.15788808,
        23.98192192,
        32.27334539,
        41.21948216,
        46.76794658,
        48.64655786,
        53.03715513,
        50.85622133,
        49.13946943,
        46.18259705,
        44.30003259,
        45.34554766,
        46.16899136,
        47.78202516,
        46.75296973,
        43.80444159,
        40.1942265,
        36.61031425,
        36.08302422,
        32.67321347,
        29.88243224,
        25.32586748,
        23.7372641,
        18.85373501,
        15.99490173,
        15.55972989,
        13.43508441,
        8.91325156,
        5.45077189,
        2.61086563,
        2.27762137,
        4.20870452,
        7.08147898,
        8.28477706,
        8.57699962,
        10.26761919,
        15.2530161,
        22.71041396,
        30.26413335,
        36.48211366,
        41.66699745,
        44.5834331,
        42.95453371,
        45.1371186,
        44.6845018,
        46.85747254,
        48.22912681,
        50.96067339,
        50.76653352,
        49.13231127,
        53.41327896,
        53.08398207,
    ]
)

time = np.array(
    [
        0.0,
        0.01010101,
        0.02020202,
        0.03030303,
        0.04040404,
        0.05050505,
        0.06060606,
        0.07070707,
        0.08080808,
        0.09090909,
        0.1010101,
        0.11111111,
        0.12121212,
        0.13131313,
        0.14141414,
        0.15151515,
        0.16161616,
        0.17171717,
        0.18181818,
        0.19191919,
        0.2020202,
        0.21212121,
        0.22222222,
        0.23232323,
        0.24242424,
        0.25252525,
        0.26262626,
        0.27272727,
        0.28282828,
        0.29292929,
        0.3030303,
        0.31313131,
        0.32323232,
        0.33333333,
        0.34343434,
        0.35353535,
        0.36363636,
        0.37373737,
        0.38383838,
        0.39393939,
        0.4040404,
        0.41414141,
        0.42424242,
        0.43434343,
        0.44444444,
        0.45454545,
        0.46464646,
        0.47474747,
        0.48484848,
        0.49494949,
        0.50505051,
        0.51515152,
        0.52525253,
        0.53535354,
        0.54545455,
        0.55555556,
        0.56565657,
        0.57575758,
        0.58585859,
        0.5959596,
        0.60606061,
        0.61616162,
        0.62626263,
        0.63636364,
        0.64646465,
        0.65656566,
        0.66666667,
        0.67676768,
        0.68686869,
        0.6969697,
        0.70707071,
        0.71717172,
        0.72727273,
        0.73737374,
        0.74747475,
        0.75757576,
        0.76767677,
        0.77777778,
        0.78787879,
        0.7979798,
        0.80808081,
        0.81818182,
        0.82828283,
        0.83838384,
        0.84848485,
        0.85858586,
        0.86868687,
        0.87878788,
        0.88888889,
        0.8989899,
        0.90909091,
        0.91919192,
        0.92929293,
        0.93939394,
        0.94949495,
        0.95959596,
        0.96969697,
        0.97979798,
        0.98989899,
        1.0,
    ]
)

init_force = force - force[0]
init_force_tracking = [time, init_force]

minimum_pulse_duration = DingModelPulseDurationFrequency().pd0
minimum_pulse_intensity = DingModelIntensityFrequency().min_pulse_intensity()


@pytest.mark.parametrize("use_sx", [True])  # Later add False
@pytest.mark.parametrize(
    "model", [DingModelFrequency(), DingModelPulseDurationFrequency(), DingModelIntensityFrequency()]
)
@pytest.mark.parametrize("force_tracking", [init_force_tracking])
@pytest.mark.parametrize("min_pulse_duration, min_pulse_intensity", [(minimum_pulse_duration, minimum_pulse_intensity)])
def test_ocp_output(model, force_tracking, use_sx, min_pulse_duration, min_pulse_intensity):
    if isinstance(model, DingModelPulseDurationFrequency):
        ocp = OcpFes().prepare_ocp(
            model=model,
            n_shooting=20,
            n_stim=10,
            final_time=1,
            force_tracking=force_tracking,
            pulse_duration_min=min_pulse_duration,
            pulse_duration_max=0.0006,
            pulse_duration_bimapping=False,
            use_sx=use_sx,
        )

        ocp = ocp.solve(Solver.IPOPT(show_online_optim=False, _max_iter=1000))
        ocp = ocp.merge_phases()

        # TODO : Add a pickle file to test
        # for key in ocp.states.key():
        #     np.testing.assert_almost_equal(ocp.states[key], pickle_file.states[key])

    elif isinstance(model, DingModelIntensityFrequency):
        ocp = OcpFes().prepare_ocp(
            model=model,
            n_shooting=20,
            n_stim=10,
            final_time=1,
            force_tracking=force_tracking,
            pulse_intensity_min=min_pulse_intensity,
            pulse_intensity_max=130,
            pulse_intensity_bimapping=False,
            use_sx=use_sx,
        )

        ocp = ocp.solve(Solver.IPOPT(show_online_optim=False, _max_iter=1000))
        ocp = ocp.merge_phases()

        # TODO : Add a pickle file to test
        # for key in ocp.states.key():
        #     np.testing.assert_almost_equal(ocp.states[key], pickle_file.states[key])

    elif isinstance(model, DingModelFrequency):
        ocp = OcpFes().prepare_ocp(
            model=model,
            n_shooting=20,
            n_stim=10,
            final_time=1,
            end_node_tracking=50,
            time_min=0.01,
            time_max=1,
            time_bimapping=True,
            use_sx=use_sx,
        )

        ocp = ocp.solve(Solver.IPOPT(show_online_optim=False, _max_iter=1000))
        ocp = ocp.merge_phases()

        # TODO : Add a pickle file to test
        # for key in ocp.states.key():
        #     np.testing.assert_almost_equal(ocp.states[key], pickle_file.states[key])


# TODO : add test_multi_start_ocp


@pytest.mark.parametrize("use_sx", [True])
@pytest.mark.parametrize("bimapped", [False, True])
def test_time_dependent_ocp_output(use_sx, bimapped):
    ocp = OcpFes().prepare_ocp(
        model=DingModelFrequencyWithFatigue(),
        n_stim=10,
        n_shooting=20,
        final_time=1,
        end_node_tracking=270,
        time_min=0.01,
        time_max=0.1,
        time_bimapping=bimapped,
        use_sx=use_sx,
    )

    sol = ocp.solve(Solver.IPOPT(show_online_optim=False, _max_iter=10000)).merge_phases()

    if bimapped:
        np.testing.assert_almost_equal(
            sol.parameters["pulse_apparition_time"],
            np.array(
                [
                    [0.0],
                    [0.04265321],
                    [0.08530643],
                    [0.12795964],
                    [0.17061285],
                    [0.21326607],
                    [0.25591928],
                    [0.29857249],
                    [0.34122571],
                    [0.38387892],
                ]
            ),
        )

        np.testing.assert_almost_equal(
            sol.states["F"],
            np.array(
                [
                    [
                        0.0,
                        1.90267799,
                        5.43433985,
                        9.51370127,
                        13.82436717,
                        18.22837202,
                        22.65257325,
                        27.05318542,
                        31.40166035,
                        35.67812851,
                        39.86800522,
                        43.96008771,
                        47.94542027,
                        51.81658395,
                        55.567235,
                        59.1917963,
                        62.68524717,
                        66.04297894,
                        69.26069623,
                        72.33435103,
                        75.26010127,
                        78.27902252,
                        81.50417523,
                        84.81924441,
                        88.16166012,
                        91.4935303,
                        94.78988784,
                        98.03317053,
                        101.21033962,
                        104.31125242,
                        107.3276852,
                        110.25271741,
                        113.0803285,
                        115.80512594,
                        118.42215779,
                        120.92678198,
                        123.31457511,
                        125.58126972,
                        127.72271333,
                        129.73484401,
                        131.61367973,
                        133.60777942,
                        135.83384802,
                        138.17277091,
                        140.56084527,
                        142.95958137,
                        145.34361708,
                        147.69508047,
                        150.00066008,
                        152.24995981,
                        154.4345091,
                        156.54714217,
                        158.58159107,
                        160.5322108,
                        162.39378914,
                        164.16141319,
                        165.83037515,
                        167.39610651,
                        168.85413348,
                        170.20004895,
                        171.42949789,
                        172.7651932,
                        174.31830017,
                        175.98447562,
                        177.7060422,
                        179.44730868,
                        181.18430005,
                        182.89983766,
                        184.58093314,
                        186.21729929,
                        187.80044739,
                        189.32311337,
                        190.77887905,
                        192.16191442,
                        193.46679841,
                        194.68839244,
                        195.82175087,
                        196.86205832,
                        197.80458713,
                        198.64467079,
                        199.37769034,
                        200.22542335,
                        201.29990116,
                        202.49758761,
                        203.76079874,
                        205.05361294,
                        206.3517645,
                        207.63777466,
                        208.89836192,
                        210.12295759,
                        211.30280365,
                        212.43037803,
                        213.49901476,
                        214.50264498,
                        215.43561674,
                        216.29256762,
                        217.06833454,
                        217.75789043,
                        218.35630132,
                        218.85869936,
                        219.26026903,
                        219.78498895,
                        220.54609186,
                        221.43887087,
                        222.40488411,
                        223.40767282,
                        224.42256209,
                        225.4317434,
                        226.42165756,
                        227.38149402,
                        228.30227849,
                        229.17629176,
                        229.9966852,
                        230.75721891,
                        231.4520792,
                        232.07574974,
                        232.62292016,
                        233.08842194,
                        233.4671848,
                        233.75420935,
                        233.94455288,
                        234.26358342,
                        234.82520245,
                        235.52392079,
                        236.30081923,
                        237.11911103,
                        237.95387523,
                        238.78710617,
                        239.60507877,
                        240.39683766,
                        241.15327865,
                        241.8665636,
                        242.52973341,
                        243.13644436,
                        243.68078443,
                        244.15714356,
                        244.56012162,
                        244.88446385,
                        245.12501692,
                        245.27670128,
                        245.33449675,
                        245.52416078,
                        245.95980711,
                        246.53570399,
                        247.19276758,
                        247.8940872,
                        248.61464113,
                        249.33633702,
                        250.04537237,
                        250.73072075,
                        251.38321165,
                        251.99494421,
                        252.55889957,
                        253.06867675,
                        253.51830858,
                        253.90213186,
                        254.21469507,
                        254.45069375,
                        254.60492644,
                        254.67226691,
                        254.64764971,
                        254.75653067,
                        255.11293556,
                        255.61126833,
                        256.19249452,
                        256.81971688,
                        257.46790939,
                        258.11896571,
                        258.75906356,
                        259.37715333,
                        259.96403913,
                        260.51179348,
                        261.01337022,
                        261.46234073,
                        261.85271026,
                        262.17878816,
                        262.4350959,
                        262.61630237,
                        262.71718002,
                        262.7325771,
                        262.65740315,
                        262.69991413,
                        262.95964364,
                        263.34976684,
                        263.82013898,
                        264.33878714,
                        264.88377073,
                        265.43913014,
                        265.99267956,
                        266.53471829,
                        267.05723603,
                        267.55340054,
                        268.01721502,
                        268.44328226,
                        268.82663813,
                        269.162632,
                        269.44683984,
                        269.67500072,
                        269.84297062,
                        269.94668965,
                        269.98215968,
                    ]
                ]
            ),
        )

        np.testing.assert_almost_equal(float(sol.cost), 0.00033617702903592005)
        np.testing.assert_almost_equal(sol.time[-1], 0.422946390157278)

    else:
        if use_sx:
            np.testing.assert_almost_equal(
                sol.parameters["pulse_apparition_time"],
                np.array(
                    [
                        [0.0],
                        [0.09710064],
                        [0.18333359],
                        [0.26229072],
                        [0.33460325],
                        [0.39855396],
                        [0.44536686],
                        [0.47349393],
                        [0.49374786],
                        [0.5126959],
                    ]
                ),
            )

            np.testing.assert_almost_equal(
                sol.states["F"],
                np.array(
                    [
                        [
                            0.0,
                            6.38727156,
                            16.11783781,
                            26.17593383,
                            36.00273363,
                            45.37960173,
                            54.1899197,
                            62.35713514,
                            69.82281197,
                            76.53771901,
                            82.45833626,
                            87.54611176,
                            91.7683551,
                            95.10017848,
                            97.52705034,
                            99.04753819,
                            99.67578887,
                            99.44328999,
                            98.39951219,
                            96.61116734,
                            94.16001887,
                            96.11512839,
                            100.92199945,
                            106.30601047,
                            111.7486213,
                            117.03447069,
                            122.04622996,
                            126.70729922,
                            130.96048294,
                            134.75872332,
                            138.0608139,
                            140.82954366,
                            143.03121553,
                            144.63604121,
                            145.61913149,
                            145.96187759,
                            145.65353181,
                            144.69278512,
                            143.08912636,
                            140.86377116,
                            138.04997821,
                            138.52118116,
                            141.41770487,
                            144.93812812,
                            148.61914142,
                            152.26147645,
                            155.75542338,
                            159.02971643,
                            162.03193459,
                            164.71971341,
                            167.05644803,
                            169.00915902,
                            170.54754438,
                            171.64376308,
                            172.27271476,
                            172.41267279,
                            172.04616255,
                            171.16098363,
                            169.75126814,
                            167.81845939,
                            165.37209175,
                            165.301616,
                            167.19971038,
                            169.69551557,
                            172.39310737,
                            175.11562331,
                            177.76438015,
                            180.27537963,
                            182.60209504,
                            184.70754445,
                            186.56027771,
                            188.13224743,
                            189.39769579,
                            190.33264935,
                            190.91481453,
                            191.12375778,
                            190.9412967,
                            190.35204489,
                            189.34405739,
                            187.90952044,
                            186.04542514,
                            185.80257576,
                            187.03645177,
                            188.79858763,
                            190.77635656,
                            192.82312223,
                            194.85552427,
                            196.81950057,
                            198.67626353,
                            200.39563236,
                            201.95254333,
                            203.32510464,
                            204.49347817,
                            205.43924342,
                            206.14506658,
                            206.59457811,
                            206.77240262,
                            206.66430519,
                            206.25742844,
                            205.54059809,
                            204.5046756,
                            204.31303955,
                            204.90259511,
                            205.85858383,
                            207.00704396,
                            208.25702331,
                            209.55409758,
                            210.8624455,
                            212.15669271,
                            213.41775174,
                            214.6305146,
                            215.78248838,
                            216.86294774,
                            217.86238837,
                            218.77216529,
                            219.58424993,
                            220.29106724,
                            220.88538906,
                            221.36026863,
                            221.70900671,
                            221.92514258,
                            222.13955747,
                            222.53972224,
                            223.06073766,
                            223.66340113,
                            224.32208233,
                            225.01900652,
                            225.74126332,
                            226.47911482,
                            227.22497871,
                            227.97278634,
                            228.71756105,
                            229.45513151,
                            230.18193136,
                            230.89485549,
                            231.59115495,
                            232.26835849,
                            232.92421316,
                            233.55663869,
                            234.16369202,
                            234.74353951,
                            235.17759645,
                            235.65568819,
                            236.16673299,
                            236.70257771,
                            237.25703172,
                            237.82526892,
                            238.40344131,
                            238.98841998,
                            239.57761619,
                            240.16885449,
                            240.76028059,
                            241.35029325,
                            241.9374929,
                            242.52064236,
                            243.0986363,
                            243.67047729,
                            244.23525669,
                            244.79213936,
                            245.34035117,
                            245.87916885,
                            246.39077522,
                            246.92264839,
                            247.46985077,
                            248.02853676,
                            248.59564433,
                            249.16868818,
                            249.74561667,
                            250.32471029,
                            250.90450797,
                            251.4837525,
                            252.06134936,
                            252.63633523,
                            253.20785355,
                            253.77513526,
                            254.33748346,
                            254.89426115,
                            255.4448812,
                            255.98879816,
                            256.52550148,
                            257.05450988,
                            257.69757457,
                            258.35673498,
                            259.02693804,
                            259.70427415,
                            260.38564147,
                            261.06852435,
                            261.75084215,
                            262.43084319,
                            263.10702846,
                            263.77809556,
                            264.44289681,
                            265.10040722,
                            265.7496999,
                            266.38992659,
                            267.02030237,
                            267.64009328,
                            268.24860634,
                            268.84518129,
                            269.42918384,
                            270.0,
                        ]
                    ]
                ),
            )

            np.testing.assert_almost_equal(float(sol.cost), 3.669135069271253e-05)
            np.testing.assert_almost_equal(sol.time[-1], 0.535539756392154)
        else:
            np.testing.assert_almost_equal(
                sol.parameters["pulse_apparition_time"],
                np.array(
                    [
                        [0.0],
                        [0.09988949],
                        [0.18580569],
                        [0.2647265],
                        [0.3370466],
                        [0.40103479],
                        [0.44791441],
                        [0.47607527],
                        [0.49633974],
                        [0.51528988],
                    ]
                ),
            )

            np.testing.assert_almost_equal(
                sol.states["F"],
                np.array(
                    [
                        [
                            0.0,
                            6.63769747,
                            16.68282577,
                            27.02426936,
                            37.09441944,
                            46.67107894,
                            55.63487008,
                            63.90648691,
                            71.4246246,
                            78.13719916,
                            83.99814521,
                            88.96709187,
                            93.0107696,
                            96.10550385,
                            98.24027834,
                            99.41984124,
                            99.66729593,
                            99.02563733,
                            97.55780468,
                            95.34502996,
                            92.48353764,
                            94.3679887,
                            99.19373278,
                            104.61057248,
                            110.09175859,
                            115.41980787,
                            120.47675267,
                            125.18588679,
                            129.49014978,
                            133.34274228,
                            136.70277619,
                            139.53337259,
                            141.80113751,
                            143.47651297,
                            144.53472176,
                            144.95710379,
                            144.73265692,
                            143.85958532,
                            142.34664627,
                            140.21408843,
                            137.4940017,
                            138.00965825,
                            140.93185136,
                            144.47366896,
                            148.17416839,
                            151.83490566,
                            155.34656941,
                            158.63813086,
                            161.65733219,
                            164.36193362,
                            166.71543182,
                            168.68493277,
                            170.24020613,
                            171.35346875,
                            171.99966272,
                            172.15708594,
                            171.80826757,
                            170.94098748,
                            169.54933267,
                            167.63467516,
                            165.20645284,
                            165.14689189,
                            167.05290682,
                            169.55568886,
                            172.25972468,
                            174.98830273,
                            177.64281194,
                            180.15929418,
                            182.49124724,
                            184.60170505,
                            186.45922803,
                            188.03577597,
                            189.30559603,
                            190.24471837,
                            190.83085223,
                            191.04356675,
                            190.86468254,
                            190.2788171,
                            189.2740306,
                            187.8425161,
                            185.98127339,
                            185.74144989,
                            186.97919616,
                            188.74521107,
                            190.72669397,
                            192.77694368,
                            194.81256464,
                            196.77946938,
                            198.63884826,
                            200.36049923,
                            201.91933715,
                            203.29344838,
                            204.46297272,
                            205.4094678,
                            206.11557886,
                            206.5649173,
                            206.74209161,
                            206.63285507,
                            206.22434411,
                            205.50538541,
                            204.46684978,
                            204.27503107,
                            204.86675943,
                            205.82563562,
                            206.97718943,
                            208.23025133,
                            209.53028308,
                            210.84139375,
                            212.13816053,
                            213.40145846,
                            214.61614795,
                            215.76970766,
                            216.85138556,
                            217.8516515,
                            218.7618351,
                            219.57388266,
                            220.28019433,
                            220.87351752,
                            221.34688182,
                            221.69356539,
                            221.90708653,
                            222.12041429,
                            222.5203897,
                            223.04171662,
                            223.64498801,
                            224.30445627,
                            225.00227366,
                            225.72548147,
                            226.46430799,
                            227.2111462,
                            227.95990864,
                            228.70560381,
                            229.44404825,
                            230.17166538,
                            230.88534127,
                            231.58231911,
                            232.26012053,
                            232.91648597,
                            233.54932897,
                            234.15670055,
                            234.73676134,
                            235.17073651,
                            235.64887415,
                            236.16005492,
                            236.69610036,
                            237.25080205,
                            237.81932095,
                            238.39779936,
                            238.98310092,
                            239.57263101,
                            240.16420945,
                            240.75597809,
                            241.34633247,
                            241.93387028,
                            242.51735197,
                            243.09567015,
                            243.66782556,
                            244.23290793,
                            244.79008059,
                            245.33856805,
                            245.87764575,
                            246.38930418,
                            246.92126419,
                            247.46857986,
                            248.02739948,
                            248.59465651,
                            249.16786215,
                            249.74496203,
                            250.32423449,
                            250.90421668,
                            251.48364995,
                            252.06143857,
                            252.63661821,
                            253.20833142,
                            253.77580837,
                            254.33835152,
                            254.89532328,
                            255.446136,
                            255.99024373,
                            256.52713552,
                            257.05632969,
                            257.69919141,
                            258.35815326,
                            259.02816474,
                            259.70531807,
                            260.38651274,
                            261.06923417,
                            261.75140259,
                            262.43126705,
                            263.10732919,
                            263.77828722,
                            264.44299403,
                            265.10042522,
                            265.7496544,
                            266.38983392,
                            267.02017941,
                            267.6399575,
                            268.2484758,
                            268.84507469,
                            269.42912052,
                            270.0,
                        ]
                    ]
                ),
            )

            np.testing.assert_almost_equal(float(sol.cost), 3.719442753142962e-05)
            np.testing.assert_almost_equal(sol.time[-1], 0.5381208818685651)

# from bioptim import SolutionMerge
def test_single_phase_time_dependent_ocp_output():
    ocp = OcpFes().prepare_ocp(
        model=DingModelFrequencyWithFatigue(),
        n_stim=1,
        n_shooting=10,
        final_time=0.1,
        use_sx=True,
    )

    sol = ocp.solve(Solver.IPOPT(show_online_optim=False, _max_iter=1000))
    # merge_sol = sol.merge_phases()
    # merge_sol = sol.decision_states(False, SolutionMerge.ALL)
    sol.graphs()
    np.testing.assert_almost_equal(
        sol.parameters["pulse_apparition_time"],
        np.array([[0.0]]
        )
    )

    np.testing.assert_almost_equal(
        sol.states["F"],
        # merge_sol[1],
        np.array([[ 0.        , 15.85448036, 36.35382298, 54.98028518, 70.84149988,
       83.4707505 , 92.52389842, 97.78058713, 99.22489701, 97.12756918,
       92.06532562]]))

    np.testing.assert_almost_equal(float(sol.cost), 0.0)













